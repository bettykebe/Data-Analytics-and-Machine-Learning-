# -*- coding: utf-8 -*-
"""02_VisualizingTwoQuantitativeVariables.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mrwhuZYWSnhzjkfy7CDCcrbL-WVgE3lZ
"""

#Importing necessary libraries for this notebook
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""# **Creating subplots with col and row**

We've seen in prior exercises that students with more absences (`"absences"`) tend to have lower final grades (`"G3"`). Does this relationship hold regardless of how much time students study each week?

To answer this, we'll look at the relationship between the number of absences that a student has in school and their final grade in the course, creating separate subplots based on each student's weekly study time (`"study_time"`).

The students_data DataFrame is loaded in one of the previous codecells for you to use.

**Instructions:**
1. Modify the code to use `relplot()` instead of `scatterplot()`.

2. Modify the code to create one scatter plot for each level of the variable `"study_time"`, arranged in columns.
3. Adapt your code to create one scatter plot for each level of a student's weekly study time, this time arranged in rows.
"""

# Change to use relplot() instead of scatterplot()
sns.scatterplot(x="absences", y="G3",
                data=student_data)

import seaborn as sns
import matplotlib.pyplot as plt

# Create subplots arranged in columns for each "study_time" level
sns.relplot(
    data=students_data,
    x="absences",
    y="G3",
    col="study_time",  # Create subplots for each study_time level
    kind="scatter",    # Scatter plot
    height=4,          # Size of each plot
    col_wrap=4         # Wrap columns if there are many levels
)
# Show plot
plt.show()

sns.relplot(
    data=students_data,
    x="absences",
    y="G3",
    row="study_time",  # Create subplots for each study_time level
    kind="scatter",    # Scatter plot
    height=4           # Size of each plot
)

# Show the plot
plt.show()

"""# **Creating two-factor subplots**

Let's continue looking at the `student_data` dataset of students in secondary school. Here, we want to answer the following question: does a student's first semester grade (`"G1"`) tend to correlate with their final grade (`"G3"`)?

There are many aspects of a student's life that could result in a higher or lower final grade in the class. For example, some students receive extra educational support from their school (`"schoolsup"`) or from their family (`"famsup"`), which could result in higher grades. Let's try to control for these two factors by creating subplots based on whether the student received extra educational support from their school or family.


**Instructions:**
* Use `relplot()` to create a scatter plot with `"G1"` on the x-axis and `"G3"` on the y-axis, using the `student_data` DataFrame.
* Create column subplots based on whether the student received support from the school (`"schoolsup"`), ordered so that `"yes"` comes before `"no"`.
* Add row subplots based on whether the student received support from the family (`"famsup"`), ordered so that `"yes"` comes before `"no"`. This will result in subplots based on two factors.

"""

import seaborn as sns
import matplotlib.pyplot as plt

# Create a scatter plot with subplots based on "schoolsup" and "famsup"
sns.relplot(
    data=student_data,
    x="G1",
    y="G3",
    col="schoolsup",  # Column subplots based on school support
    row="famsup",     # Row subplots based on family support
    kind="scatter",   # Scatter plot
    height=4,         # Height of each subplot
    col_order=["yes", "no"],  # Ensure "yes" comes before "no" for schoolsup
    row_order=["yes", "no"],  # Ensure "yes" comes before "no" for famsup
)

# Show the plot
plt.show()

"""# **Changing the size of scatter plot points**

In this exercise, we'll explore Seaborn's `mpg` dataset, which contains one row per car model and includes information such as the year the car was made, the number of miles per gallon (`"M.P.G."`) it achieves, the power of its engine (measured in `"horsepower"`), and its country of origin.

What is the relationship between the power of a car's engine (`"horsepower"`) and its fuel efficiency (`"mpg"`)? And how does this relationship vary by the number of cylinders (`"cylinders"`) the car has? Let's find out.

Let's continue to use `relplot()` instead of `scatterplot()` since it offers more flexibility.

Instructions:
* Use `relplot()` and the `mpg` DataFrame to create a scatter plot with `"horsepower"` on the x-axis and `"mpg"` on the y-axis. Vary the size of the points by the number of cylinders in the car (`"cylinders"`).
* To make this plot easier to read, use hue to vary the color of the points by the number of cylinders in the car (`"cylinders"`).

"""

#Loading the mpg DataFrame from dataset file
mpg = pd.read_csv('https://github.com/DataAnalyst21/DatasetsForDataAnalytics/blob/main/mpg.csv?raw=True')

#Exploring the mpg DataFrame by displaying few rows
print(mpg.head())

# Create scatter plot of horsepower vs. mpg and make the size of the plot circles vary using number of cylinders
sns.relplot(
    data=mpg,
    x="horsepower",
    y="mpg",
    size="cylinders",  # Vary the size of points by "cylinders"
    hue="cylinders",   # Vary the color of points by "cylinders"
    sizes=(10, 200),   # Set the range for point sizes
    kind="scatter",
    palette="viridis", # Use a color palette for better visualization
)

# Load the mpg dataset
mpg = sns.load_dataset("mpg")

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Load the mpg dataset
mpg = sns.load_dataset("mpg")

# Create a scatter plot with "acceleration" on x-axis and "mpg" on y-axis
sns.relplot(
    data=mpg,
    x="acceleration",
    y="mpg",
    hue="origin",   # Vary the color of points by "origin"
    style="origin", # Vary the style of points by "origin"
    kind="scatter",
    palette="Set2"  # Use a visually distinct color palette
)

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns

# Load the dataset from a local path
mpg = pd.read_csv('https://github.com/DataAnalyst21/DatasetsForDataAnalytics/blob/main/mpg.csv?raw=True')

# Create the line plot using relplot
sns.relplot(data=mpg, x="model_year", y="mpg", kind="line")

# Display the plot
import matplotlib.pyplot as plt
plt.show()

"""import seaborn as sns
import matplotlib.pyplot as plt

# Load the mpg dataset
mpg = sns.load_dataset("mpg")

# Create a scatter plot with "acceleration" on x-axis and "mpg" on y-axis
sns.relplot(
    data=mpg,
    x="acceleration",
    y="mpg",
    hue="origin",   # Vary the color of points by "origin"
    style="origin", # Vary the style of points by "origin"
    kind="scatter",
    palette="Set2"  # Use a visually distinct color palette
)

# Show the plot
plt.show()import pandas as pd
import seaborn as sns

# Load the dataset from a local path
mpg = pd.read_csv('path_to_downloaded_mpg.csv')

# Create the line plot using relplot
sns.relplot(data=mpg, x="model_year", y="mpg", kind="line")

# Display the plot
import matplotlib.pyplot as plt
plt.show()# **Changing the style of scatter plot points**

Let's continue exploring Seaborn's `mpg` dataset by looking at the relationship between how fast a car can accelerate (`"acceleration"`) and its fuel efficiency (`"mpg"`). Do these properties vary by country of origin (`"origin"`)?

Note that the `"acceleration"` variable is the time to accelerate from 0 to 60 miles per hour, in seconds. Higher values indicate slower acceleration.

**Instructions:**
* Use `relplot()` and the `mpg` DataFrame to create a scatter plot with `"acceleration"` on the x-axis and `"mpg"` on the y-axis. Vary the style and color of the plot points by country of origin (`"origin"`).

import pandas as pd
import seaborn as sns

# Load the dataset from a local path
mpg = pd.read_csv('path_to_downloaded_mpg.csv')

# Create the line plot using relplot
sns.relplot(data=mpg, x="model_year", y="mpg", kind="line")

# Display the plot
import matplotlib.pyplot as plt
plt.show()# **Interpreting line plots**

In this exercise, we'll continue to explore Seaborn's `mpg` dataset, which contains one row per car model and includes information such as the year the car was made, its fuel efficiency (measured in "miles per gallon" or `"M.P.G"`), and its country of origin (USA, Europe, or Japan).

How has the average miles per gallon achieved by these cars changed over time?
Let's use line plots to find out!

**Instructions:**
* Use `relplot()` and the `mpg` DataFrame to create a line plot with `"model_year"` on the x-axis and `"mpg"` on the y-axis.

# **Visualizing standard deviation with line plots**

In the last exercise, we looked at how the average miles per gallon achieved by cars has changed over time. Now let's use a line plot to visualize how the distribution of miles per gallon has changed over time.

Instructions:
* Change the plot so the shaded area shows the standard deviation instead of the confidence interval for the mean.
"""

# Make the shaded area show the standard deviation by modifying the code given below
sns.relplot(x="model_year", y="mpg",
            data=mpg, kind="line")

# Show plot
plt.show()

"""# **Plotting subgroups in line plots**

Let's continue to look at the `mpg` dataset. We've seen that the average miles per gallon for cars has increased over time, but how has the average horsepower for cars changed over time? And does this trend differ by country of origin?

**Instructions:**
* Use `relplot()` and the mpg DataFrame to create a line plot with `"model_year"` on the x-axis and `"horsepower"` on the y-axis. Turn off the confidence intervals on the plot.
* Create different lines for each country of origin (`"origin"`) that vary in both line style and color.
* Add markers for each data point to the lines and use the dashes parameter to use solid lines for all countries, while still allowing for different marker styles for each line.


"""

import seaborn as sns
import matplotlib.pyplot as plt

# Load the mpg dataset
mpg = sns.load_dataset('mpg')

# Create a line plot with model_year on the x-axis and horsepower on the y-axis
sns.relplot(
    data=mpg,
    x="model_year",
    y="horsepower",
    kind="line",
    hue="origin",
    style="origin",
    markers=True,
    dashes=False
)

# Show the plot
plt.show()